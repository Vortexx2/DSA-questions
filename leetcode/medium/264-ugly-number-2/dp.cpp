/**
 * @file dp.cpp
 * @author Vortexx2
 * @brief Problem 264 - Ugly Number 2
 * @approach Using a frontier approach
 * @date 25-07-2022
 *
 * Runtime - 267 ms
 * Memory Usage - 29.6 MB
 */
#include <iostream>
#include <map>
#include <set>
#include <vector>

using namespace std;

class Solution {
 public:
  int nthUglyNumber(int n) {
    int currUgly = 1, currIndex = 1;
    vector<int> primeFactors = {2, 3, 5};

    // set generally uses a BST to store elements in a sorted manner. duplicate
    // values are not allowed
    set<long long int> frontier;

    while (currIndex != n) {
      for (int factor : primeFactors) {
        // we insert each ugly number that can be generated by the current ugly
        // number into the frontier
        frontier.insert((long long)currUgly * factor);
      }

      // this is the smallest element in the frontier
      currUgly = *frontier.begin();
      frontier.erase(currUgly);

      currIndex++;
    }

    return currUgly;
  }
};